# -*- coding: utf-8 -*-
"""IBM ANALYZING HISTORICAL.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Rxfol8ugPDG5l7AxJPAxQpUEy6bXQVvU

**IBM FIRST PROJECT COURSE**

> Author: @RazerArdi (Github). 03/04/2024(DD/MM/YY/)

# **Use yfinance to Extract Stock Data**

This script provides a quick way to access and visualize historical stock price data for Tesla within a Python environment. The `yfinance` library to retrieve historical stock price data for Tesla, Inc. (TSLA) from the Yahoo Finance platform. It begins by importing the `yfinance` library under the alias `yf`. Then, it creates a `Ticker` object for Tesla with the ticker symbol 'TSLA'. The script retrieves historical stock price data for Tesla using the `history()` method with the `period` parameter set to "max" to fetch all available historical data. After fetching the data, it resets the index of the resulting DataFrame to integers using the `reset_index()` method. Finally, it displays the first 5 rows of the DataFrame containing the historical stock price data for Tesla using the `head()` method.
"""

import yfinance as yf

tesla = yf.Ticker('TSLA')
tesla_data = tesla.history(period="max")
tesla_data.reset_index(inplace=True)
tesla_data.head()

"""# **Use Webscraping to Extract Tesla Revenue Data**

Import Libraries:

1.   requests: This library allows making HTTP requests in Python.
2.   pandas: This library provides data structures and data analysis tools.
3. BeautifulSoup: This library facilitates scraping information from web pages by parsing HTML and XML documents.

**the code snippet demonstrates a basic approach to web scraping with Python.** This Script uses the requests library to fetch the HTML content of a webpage, the pandas library for data manipulation, and the BeautifulSoup library for HTML parsing. After defining the URL of the webpage to be scraped, it retrieves the HTML content and parses it with BeautifulSoup. It then extracts all instances of the <title> tag and prints them. A note at the end highlights that the purpose is to scrape the title tag, suggesting the use of find() instead of find_all() for efficiency, considering that the <title> tag is typically unique.
"""

import requests  # Importing the requests library for making HTTP requests
import pandas as pd  # Importing the pandas library for data manipulation
from bs4 import BeautifulSoup  # Importing BeautifulSoup for parsing HTML

# Define the URL of the webpage to be scraped
url = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/revenue.htm"

# Fetch the HTML content of the webpage
html_data = requests.get(url).text

# Parse the HTML content using BeautifulSoup
soup = BeautifulSoup(html_data, "html.parser")

# Find all instances of the <title> tag in the parsed HTML content
tables = soup.find_all('title')

# Print the list of <title> tags found in the HTML content
print(tables)

# Note: The purpose of this code is to scrape the title tag from a webpage using BeautifulSoup.
# However, it's worth noting that the <title> tag is typically unique and located in the <head> section of an HTML document.
# Using find() instead of find_all() might be more appropriate here to get the single <title> tag.

"""**This code snippet demonstrates how to extract tabular data from HTML and store it in a structured format using pandas DataFrame.**  iterates through rows in the second `<tbody>` tag of a webpage's HTML content and adds the data to a DataFrame. It extracts text from each `<td>` tag within the rows, representing dates and revenues. The extracted revenue is cleaned by removing dollar signs and commas. Then, the data is appended to the DataFrame. After dropping any NaN values and empty strings from the DataFrame, it displays the last 5 rows."""

# Using the second tbody and adding data to the DataFrame
for row in soup.find_all("tbody")[1].find_all("tr"):
    col = row.find_all("td")
    if col:  # Ensuring that the column is not empty
        date = col[0].text
        revenue = col[1].text.replace("$", "").replace(",", "")
        tesla_revenue.loc[len(tesla_revenue)] = {"Date": date, "Revenue": revenue}

# Dropping NaN values and empty strings
tesla_revenue.dropna(inplace=True)
tesla_revenue = tesla_revenue[tesla_revenue['Revenue'] != ""]

# Displaying the last 5 rows of the DataFrame
tesla_revenue.tail()

"""# **Use yfinance to Extract Stock Data**

This code serves as an example of how to use the `yfinance` library to fetch historical stock price data and manipulate it using pandas DataFrames in Python and snippet utilizes the `yfinance` library to retrieve historical stock price data for the "GME" (GameStop Corp.) ticker symbol. After fetching the data, it resets the index of the DataFrame for convenience and displays the first 5 rows of the DataFrame using the `head()` function.
"""

import yfinance as yf

gme = yf.Ticker("GME") # Creating a Ticker object for the GameStop (GME) stock
gme_data = gme.history(period="max") # Retrieving historical stock price data for GME, with the period set to "max" to get all available data
gme_data.reset_index(inplace=True) # Resetting the index of the DataFrame to make the date a regular column
gme_data.head(5) # Displaying the first 5 rows of the DataFrame

"""# **Use Webscraping to Extract GME Revenue Data**

This script extracts GameStop's quarterly revenue data from a specific HTML table on a webpage. It utilizes the `requests` library to fetch the HTML content from the provided URL and `BeautifulSoup` for parsing the HTML data. The revenue data is then extracted using Pandas' `read_html()` function. After renaming the columns for clarity, the script cleans the 'Revenue' column to remove commas and dollar signs. It displays the last 5 rows of the DataFrame containing the revenue data for further examination.
"""

html_data = requests.get("https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/stock.html").text
soup = BeautifulSoup(html_data)

gme_revenue = pd.read_html("https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/stock.html")[1]
gme_revenue = gme_revenue.rename(columns={'GameStop Quarterly Revenue (Millions of US $)': 'Date', 'GameStop Quarterly Revenue (Millions of US $).1': 'Revenue'})
gme_revenue["Revenue"] = gme_revenue['Revenue'].str.replace(',|\$',"")
gme_revenue.tail()

"""# **Plot Tesla Stock Graph**

Function called as `plot_graph` employs Plotly's capabilities to create an interactive subplot visualization for historical share price and revenue data of a given stock. Utilizing `make_subplots`, it arranges two subplots vertically, sharing the x-axis, with titles denoting "Historical Share Price ($)" and "Historical Revenue ($)". The function populates the subplots with traces of stock price and revenue, plotting them against time, parsed using `pd.to_datetime`. It configures the axes labels and layout, setting the y-axis labels respectively as "Price" and "Revenue (Millions)". Legends are omitted via `showlegend=False`, and a range slider is added for x-axis navigation. It displays the graph for the specified stock, in this case, 'Tesla Historical Share Price & Revenue'.
"""

from plotly.subplots import make_subplots
import plotly.graph_objects as go

def plot_graph(stock_data, revenue_data, stock):
    fig = make_subplots(rows=2, cols=1, shared_xaxes=True, subplot_titles=("Historical Share Price ($)", "Historical Revenue ($)"), vertical_spacing = .5)
    fig.add_trace(go.Scatter(x=pd.to_datetime(stock_data.Date, infer_datetime_format=True), y=stock_data.Close.astype("float"), name="Share Price"), row=1, col=1)
    fig.add_trace(go.Scatter(x=pd.to_datetime(revenue_data.Date, infer_datetime_format=True), y=revenue_data.Revenue.astype("float"), name="Revenue"), row=2, col=1)
    fig.update_xaxes(title_text="Date", row=1, col=1)
    fig.update_xaxes(title_text="Date", row=2, col=1)
    fig.update_yaxes(title_text="Price ($)", row=1, col=1)
    fig.update_yaxes(title_text="Revenue ($ Millions)", row=2, col=1)
    fig.update_layout(showlegend=False, height=1000, title=stock, xaxis_rangeslider_visible=True)
    fig.show()
plot_graph(tesla_data, tesla_revenue, 'Tesla Historical Share Price & Revenue')

"""# **Plot GameStop Stock Graph**

The function sets the title of the overall plot to the given stock's name and displays the plot with a range slider for the x-axis. Function named `plot_graph`, a subplot is created to display historical share price and revenue data for a given stock. The function takes in three parameters: `stock_data` representing historical stock price data, `revenue_data` representing historical revenue data, and `stock` representing the name of the stock. The function utilizes Plotly library to generate interactive plots. It creates two subplots arranged vertically, each representing historical share price and revenue respectively. The x-axis of both subplots is labeled as "Date", while the y-axis of the first subplot is labeled as "Price", and the second subplot is labeled as "Revenue(Millions)".
"""

from plotly.subplots import make_subplots
import plotly.graph_objects as go

def plot_graph(stock_data, revenue_data, stock):
    fig = make_subplots(rows=2, cols=1, shared_xaxes=True, subplot_titles=("Historical Share Price ($)", "Historical Revenue ($)"), vertical_spacing = .5)
    fig.add_trace(go.Scatter(x=pd.to_datetime(stock_data.Date, infer_datetime_format=True), y=stock_data.Close.astype("float"), name="Share Price"), row=1, col=1)
    fig.add_trace(go.Scatter(x=pd.to_datetime(revenue_data.Date, infer_datetime_format=True), y=revenue_data.Revenue.astype("float"), name="Revenue"), row=2, col=1)
    fig.update_xaxes(title_text="Date", row=1, col=1)
    fig.update_xaxes(title_text="Date", row=2, col=1)
    fig.update_yaxes(title_text="Price ($)", row=1, col=1)
    fig.update_yaxes(title_text="Revenue ($ Millions)", row=2, col=1)
    fig.update_layout(showlegend=False, height=1000, title=stock, xaxis_rangeslider_visible=True)
    fig.show()

plot_graph(gme_data, gme_revenue, 'GameStop')